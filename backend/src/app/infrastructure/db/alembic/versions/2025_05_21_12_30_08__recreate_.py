"""recreate migrations

Revision ID: 5d2b80d6edf5
Revises:
Create Date: 2025-05-21 12:30:08.595365+03:00

"""

from typing import Sequence, Union
import src
import pgvector

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "5d2b80d6edf5"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE EXTENSION IF NOT EXISTS vector;")
    op.create_table(
        "users",
        sa.Column("username", sa.String(length=50), nullable=False),
        sa.Column("password", sa.String(length=255), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("first_name", sa.String(length=25), nullable=True),
        sa.Column("last_name", sa.String(length=25), nullable=True),
        sa.Column("confirmed", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "documents_authors",
        sa.Column("first_name", sa.String(length=20), nullable=False),
        sa.Column("last_name", sa.String(length=20), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("created_by_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_documents_authors_created_by_id"),
        "documents_authors",
        ["created_by_id"],
        unique=False,
    )
    op.create_table(
        "files",
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("path", sa.String(), nullable=False),
        sa.Column(
            "extension",
            src.app.infrastructure.db.orm.types.type_decorators.file_extension.FileExtensionTD(),
            nullable=False,
        ),
        sa.Column(
            "mimetype",
            src.app.infrastructure.db.orm.types.type_decorators.mimetypes.MimeTypeTD(),
            nullable=False,
        ),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("created_by_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_files_created_by_id"), "files", ["created_by_id"], unique=False
    )
    op.create_index(op.f("ix_files_title"), "files", ["title"], unique=False)
    op.create_table(
        "folders",
        sa.Column("title", sa.String(length=30), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=False),
        sa.Column("parent_id", sa.Uuid(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("created_by_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(["parent_id"], ["folders.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("title", "parent_id", name="uq_folder_title_parent"),
    )
    op.create_index(
        op.f("ix_folders_created_by_id"), "folders", ["created_by_id"], unique=False
    )
    op.create_index(
        op.f("ix_folders_description"), "folders", ["description"], unique=False
    )
    op.create_index(
        op.f("ix_folders_parent_id"), "folders", ["parent_id"], unique=False
    )
    op.create_index(op.f("ix_folders_title"), "folders", ["title"], unique=False)
    op.create_table(
        "documents",
        sa.Column("author_id", sa.Uuid(), nullable=False),
        sa.Column("title", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("text", sa.Text(), nullable=True),
        sa.Column("checked", sa.Boolean(), nullable=False),
        sa.Column(
            "verdict",
            src.app.infrastructure.db.orm.types.type_decorators.plagiarism_result.PlagiarismCheckVerdictTD(),
            nullable=True,
        ),
        sa.Column("idexed_at", sa.DateTime(), nullable=True),
        sa.Column("is_indexed", sa.Boolean(), nullable=True),
        sa.Column("checked_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("file_id", sa.Uuid(), nullable=False),
        sa.Column("folder_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("created_by_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["author_id"],
            ["documents_authors.id"],
        ),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["file_id"],
            ["files.id"],
        ),
        sa.ForeignKeyConstraint(
            ["folder_id"],
            ["folders.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("author_id", "title", name="unique_document_author_title"),
        sa.UniqueConstraint("file_id", name="unique_document_file_id"),
    )
    op.create_index(
        op.f("ix_documents_author_id"), "documents", ["author_id"], unique=False
    )
    op.create_index(
        op.f("ix_documents_created_by_id"), "documents", ["created_by_id"], unique=False
    )
    op.create_index(
        op.f("ix_documents_folder_id"), "documents", ["folder_id"], unique=False
    )
    op.create_table(
        "document_chunks",
        sa.Column("document_id", sa.Uuid(), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("idx", sa.Integer(), nullable=False),
        sa.Column("vector", pgvector.sqlalchemy.vector.VECTOR(dim=128), nullable=True),
        sa.Column("size", sa.Integer(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["document_id"],
            ["documents.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("document_id", "idx"),
    )
    op.create_index(
        op.f("ix_document_chunks_vector"), "document_chunks", ["vector"], unique=False
    )
    op.create_table(
        "plagiarism_checks",
        sa.Column("document_id", sa.Uuid(), nullable=False),
        sa.Column("max_similarity_score", sa.Float(), nullable=False),
        sa.Column(
            "status",
            src.app.infrastructure.db.orm.types.type_decorators.plagiarism_result.PlagiarismCheckStatusTD(),
            nullable=False,
        ),
        sa.Column(
            "verdict",
            src.app.infrastructure.db.orm.types.type_decorators.plagiarism_result.PlagiarismCheckVerdictTD(),
            nullable=False,
        ),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("created_by_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["document_id"],
            ["documents.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_plagiarism_checks_created_by_id"),
        "plagiarism_checks",
        ["created_by_id"],
        unique=False,
    )
    op.create_table(
        "plagiarism_matches",
        sa.Column("check_id", sa.Uuid(), nullable=False),
        sa.Column("source_chunk_id", sa.Uuid(), nullable=False),
        sa.Column("matched_chunk_id", sa.Uuid(), nullable=False),
        sa.Column("similarity", sa.Float(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["check_id"],
            ["plagiarism_checks.id"],
        ),
        sa.ForeignKeyConstraint(
            ["matched_chunk_id"],
            ["document_chunks.id"],
        ),
        sa.ForeignKeyConstraint(
            ["source_chunk_id"],
            ["document_chunks.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("plagiarism_matches")
    op.drop_index(
        op.f("ix_plagiarism_checks_created_by_id"), table_name="plagiarism_checks"
    )
    op.drop_table("plagiarism_checks")
    op.drop_index(op.f("ix_document_chunks_vector"), table_name="document_chunks")
    op.drop_table("document_chunks")
    op.drop_index(op.f("ix_documents_folder_id"), table_name="documents")
    op.drop_index(op.f("ix_documents_created_by_id"), table_name="documents")
    op.drop_index(op.f("ix_documents_author_id"), table_name="documents")
    op.drop_table("documents")
    op.drop_index(op.f("ix_folders_title"), table_name="folders")
    op.drop_index(op.f("ix_folders_parent_id"), table_name="folders")
    op.drop_index(op.f("ix_folders_description"), table_name="folders")
    op.drop_index(op.f("ix_folders_created_by_id"), table_name="folders")
    op.drop_table("folders")
    op.drop_index(op.f("ix_files_title"), table_name="files")
    op.drop_index(op.f("ix_files_created_by_id"), table_name="files")
    op.drop_table("files")
    op.drop_index(
        op.f("ix_documents_authors_created_by_id"), table_name="documents_authors"
    )
    op.drop_table("documents_authors")
    op.drop_table("users")
    op.execute("DROP EXTENSION IF EXISTS vector;")
    # ### end Alembic commands ###

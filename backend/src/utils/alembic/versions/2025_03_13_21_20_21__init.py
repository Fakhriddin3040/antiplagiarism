"""Init...

Revision ID: 541ec157292a
Revises: bcc32048dedc
Create Date: 2025-03-13 21:20:21.414410+03:00

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "541ec157292a"
down_revision: Union[str, None] = "bcc32048dedc"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("jobs")
    op.drop_table("billing_transactions")
    op.drop_index("ix_user_tokens_token", table_name="user_tokens")
    op.drop_table("user_tokens")
    op.drop_table("organization_members")
    op.drop_table("run_job_executions")
    op.drop_table("billing_accounts")
    op.drop_index("idx_job_schedules_day_of_week", table_name="job_schedules")
    op.drop_index("idx_job_schedules_job_id", table_name="job_schedules")
    op.drop_index("idx_job_schedules_type", table_name="job_schedules")
    op.drop_table("job_schedules")
    op.drop_index("ix_jobs_executions_status", table_name="job_executions")
    op.drop_table("job_executions")
    op.drop_table("deploy_job_executions")
    op.drop_table("payment_transactions")
    op.drop_table("organizations")
    op.drop_table("users")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "credits",
            sa.NUMERIC(precision=18, scale=2),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "first_name", sa.VARCHAR(length=150), autoincrement=False, nullable=True
        ),
        sa.Column(
            "last_name", sa.VARCHAR(length=150), autoincrement=False, nullable=True
        ),
        sa.Column(
            "display_name", sa.VARCHAR(length=150), autoincrement=False, nullable=True
        ),
        sa.Column(
            "birthday", sa.VARCHAR(length=10), autoincrement=False, nullable=True
        ),
        sa.Column("gender", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "phone_number", sa.VARCHAR(length=20), autoincrement=False, nullable=True
        ),
        sa.Column("avatar_url", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "username", sa.VARCHAR(length=150), autoincrement=False, nullable=True
        ),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="users_pkey"),
        sa.UniqueConstraint("email", name="users_email_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "organizations",
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("owner_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "events",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("billing_account_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["billing_account_id"],
            ["billing_accounts.id"],
            name="organizations_billing_account_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["users.id"], name="organizations_owner_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="organizations_pkey"),
        sa.UniqueConstraint("name", name="organizations_name_key"),
        sa.UniqueConstraint("owner_id", name="organizations_owner_id_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "payment_transactions",
        sa.Column(
            "order_id", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "payment_id", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column("billing_account_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
        sa.Column(
            "credits",
            sa.NUMERIC(precision=18, scale=2),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "FAILED", "PENDING", "COMPLETED", name="paymenttransactionstatusenum"
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("timezone('Europe/Moscow'::text, now())"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "card_id", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column("pan", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "error_code", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["billing_account_id"],
            ["billing_accounts.id"],
            name="payment_transactions_billing_account_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="payment_transactions_pkey"),
        sa.UniqueConstraint("order_id", name="payment_transactions_order_id_key"),
        sa.UniqueConstraint("payment_id", name="payment_transactions_payment_id_key"),
    )
    op.create_table(
        "deploy_job_executions",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("pod_url", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("proxy_url", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("health_status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "health_status_updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["job_executions.id"], name="deploy_job_executions_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="deploy_job_executions_pkey"),
    )
    op.create_table(
        "job_executions",
        sa.Column("job_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("pod_id", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("logs_s3_key", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("run_job_logs_s3_key", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("completion_s3_key", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("input_s3_key", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "start_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "end_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "pod_creation_started_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "gpu_info",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM(
                "PENDING",
                "CREATING",
                "PROVISIONING",
                "RUNNING",
                "COMPLETED",
                "FAILED",
                "TERMINATED",
                "SKIPPED",
                "TIMED_OUT",
                "DEPLOYMENT_FAILED",
                "DEPLOYMENT_SUCCESS",
                name="jobexecutionstatusenum",
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["job_id"], ["jobs.id"], name="job_executions_job_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="job_executions_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        "ix_jobs_executions_status", "job_executions", ["status"], unique=False
    )
    op.create_table(
        "job_schedules",
        sa.Column("job_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "type",
            postgresql.ENUM(
                "WORKDAYS", "WEEKENDS", "SPECIFIC_DAY", name="jobscheduletypeenum"
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "day_of_week",
            postgresql.ENUM(
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY",
                "SUNDAY",
                name="dayofweekenum",
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("start_time", postgresql.TIME(), autoincrement=False, nullable=False),
        sa.Column("end_time", postgresql.TIME(), autoincrement=False, nullable=True),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["job_id"],
            ["jobs.id"],
            name="job_schedules_job_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="job_schedules_pkey"),
    )
    op.create_index("idx_job_schedules_type", "job_schedules", ["type"], unique=False)
    op.create_index(
        "idx_job_schedules_job_id", "job_schedules", ["job_id"], unique=False
    )
    op.create_index(
        "idx_job_schedules_day_of_week", "job_schedules", ["day_of_week"], unique=False
    )
    op.create_table(
        "billing_accounts",
        sa.Column("owner_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "credits",
            sa.NUMERIC(precision=18, scale=2),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["users.id"], name="billing_accounts_owner_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="billing_accounts_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "run_job_executions",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("artifacts_s3_key", sa.TEXT(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["id"], ["job_executions.id"], name="run_job_executions_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="run_job_executions_pkey"),
    )
    op.create_table(
        "organization_members",
        sa.Column("organization_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("role", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organizations.id"],
            name="organization_members_organization_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="organization_members_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="organization_members_pkey"),
    )
    op.create_table(
        "user_tokens",
        sa.Column("name", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("token", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("organization_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organizations.id"],
            name="user_tokens_organization_id_fkey",
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="user_tokens_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="user_tokens_pkey"),
    )
    op.create_index("ix_user_tokens_token", "user_tokens", ["token"], unique=True)
    op.create_table(
        "billing_transactions",
        sa.Column("billing_account_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "type",
            postgresql.ENUM(
                "PURCHASE",
                "USAGE",
                "REFUND",
                "ADJUSTMENT",
                name="billingtransactiontypeenum",
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "credits",
            sa.NUMERIC(precision=18, scale=2),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "PENDING", "COMPLETED", "FAILED", name="billingtransactionstatusenum"
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "reference_type",
            postgresql.ENUM(
                "JOB_EXECUTION", name="billingtransactionreferencetypeenum"
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "reference_id", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
        sa.Column(
            "user_id", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["billing_account_id"],
            ["billing_accounts.id"],
            name="billing_transactions_billing_account_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="billing_transactions_pkey"),
    )
    op.create_table(
        "jobs",
        sa.Column(
            "type",
            postgresql.ENUM("RUN", "DEPLOY", name="jobtypeenum"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("build_id", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "build_status",
            postgresql.ENUM(
                "BUILDING", "BUILD_FAILED", "BUILD_SUCCESS", name="jobbuildstatusenum"
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "config",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "params",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "target_image", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "events",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("job_s3_key", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("s3_build_logs_key", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("input_s3_key", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("organization_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"], ["organizations.id"], name="jobs_organization_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="jobs_user_id_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name="jobs_pkey"),
    )
    # ### end Alembic commands ###
